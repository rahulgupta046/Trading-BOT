# Python file that contains the code for all indicators as classes
# columns = ['open_time', 'open', 'high', 'low', 'close', 'volume']
import ta
import pandas as pd
import numpy as np

'''
on creation takes in data. update_trade_signal function 
returns
'Buy' -> Buy signal
'Sell' -> Sell signal
'No Signal' -> no signal generated by MACD
'''


class MACD:
    def __init__(self, data) -> None:
        self.macd_data = ta.trend.MACD(close=data['close'])
        self.macd_line = self.macd_data.macd().dropna()
        self.signal_line = self.macd_data.macd_signal()

    def update_trade_signal(self, data):
        # Perform updates
        self.macd_data = ta.trend.MACD(close=data['close'])
        self.macd_line = self.macd_data.macd()
        self.signal_line = self.macd_data.macd_signal()

        # Condition for a buy signal
        # MACD line crosses over signal line(latest is greater and second_latest is smaller)
        buy_signal = self.macd_line.values[-1] > self.signal_line.values[-1] and self.macd_line.values[-2] < self.signal_line.values[-2]

        # Condition for a sell signal
        sell_signal = self.macd_line.values[-1] < self.signal_line.values[-1] and self.macd_line.values[-2] > self.signal_line.values[-2]

        if buy_signal:
            return "Buy"
        elif sell_signal:
            return "Sell"
        else:
            return "No Signal"


'''
on creation takes in data. update_trade_signal function 
returns
'Buy' -> Buy signal
'Sell' -> Sell signal
'No Signal' -> no signal generated by RSI
'''


class RSI:
    def __init__(self, data) -> None:
        # calculate initial RSI of latest 14 values
        self.indicator = ta.momentum.RSIIndicator(data['close'], window=14)
        self.rsi_values = self.indicator.rsi().values

    def update_trade_signal(self, data):
        # perform Updates
        self.indicator = ta.momentum.RSIIndicator(data['close'], window=14)
        self.rsi_values = self.indicator.rsi().values

        # Generate signal and return
        buy_signal = (self.rsi_values[-1] < 30)
        sell_signal = (self.rsi_values[-1] > 70)

        if buy_signal:
            return "Buy"
        elif sell_signal:
            return "Sell"
        else:
            return "No Signal"


# TODO check volume indicator with pops
'''
function takes in new data. get_signal function returns bool value
True - trade supported by volume
False - trade not supported by volume 
'''


class VolumeIndicator:
    def __init__(self, data) -> None:
        self.volume = data['volume']
        self.vmean10 = np.mean(data['volume'][-10::])

    def get_signal(self, data):
        # Getting the updated data
        self.volume = data['volume']
        # check if > past 10 average
        val = self.volume.values[-1] > self.vmean10

        # update vmean10
        self.vmean10 = np.mean(data['volume'][-10::])
        return val
